-- File auto generated by purescript-bridge! --
module Auth.Models where

import Data.Generic.Rep (class Generic)
import Data.Generic.Rep.Show (genericShow)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import GHC.Int (Int64)
import Prim (Boolean, String)
import Data.Argonaut (class DecodeJson, class EncodeJson)
import Data.Argonaut.Generic (genericDecodeJson, genericEncodeJson)

import Prelude

newtype User
  = User
      { userId :: Int64
      , userName :: String
      , userEmail :: String
      , userAdmin :: Boolean
      }


derive instance eqUser :: Eq User
derive instance genericUser :: Generic User _
derive instance newtypeUser :: Newtype User _

instance decodeUser :: DecodeJson User where
    decodeJson = genericDecodeJson
instance encodeUser :: EncodeJson User where
    encodeJson = genericEncodeJson

--------------------------------------------------------------------------------
_User :: Iso' User { userId :: Int64
                   , userName :: String
                   , userEmail :: String
                   , userAdmin :: Boolean }
_User = _Newtype
--------------------------------------------------------------------------------
newtype CreateUser
  = CreateUser
      { createUserName :: String
      , createUserEmail :: String
      , createUserPassword :: String
      }


derive instance eqCreateUser :: Eq CreateUser
derive instance genericCreateUser :: Generic CreateUser _
derive instance newtypeCreateUser :: Newtype CreateUser _

instance decodeCreateUser :: DecodeJson CreateUser where
    decodeJson = genericDecodeJson
instance encodeCreateUser :: EncodeJson CreateUser where
    encodeJson = genericEncodeJson

--------------------------------------------------------------------------------
_CreateUser :: Iso' CreateUser { createUserName :: String
                               , createUserEmail :: String
                               , createUserPassword :: String }
_CreateUser = _Newtype
--------------------------------------------------------------------------------
newtype Login
  = Login
      { loginEmail :: String
      , loginPassword :: String
      }


derive instance eqLogin :: Eq Login
derive instance genericLogin :: Generic Login _
derive instance newtypeLogin :: Newtype Login _

instance decodeLogin :: DecodeJson Login where
    decodeJson = genericDecodeJson
instance encodeLogin :: EncodeJson Login where
    encodeJson = genericEncodeJson
--------------------------------------------------------------------------------
_Login :: Iso' Login { loginEmail :: String, loginPassword :: String }
_Login = _Newtype
--------------------------------------------------------------------------------
